<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on My Site</title><link>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/</link><description>Recent content in Posts on My Site</description><generator>Hugo -- 0.147.8</generator><language>en</language><lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oxcarbazerpine.github.io/qingtaihugo/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hash算法</title><link>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</guid><description>&lt;p>The original data is calculated into a string of fixed-length numbers through a hash function, (such as SHA-256 algorithm which is 256 bits long), the calculated value is called a hash value (or digest). Hash values are irreversible, meaning that original data cannot be deduced from the hash value. Even if the original data changes slightly, the calculated hash value will be completely different from the previous one, making it hard to break violently according to the previous value. In practical applications, it&amp;rsquo;s often used for comparison. For instance, when we input a password, its hash value is calculated first and then transmitted to the server database. The password data stored in the database are all hash values of the original passwords, and a comparison with the hash value transmitted by the user verifies the correctness of the password.&lt;/p></description></item><item><title>存储技术</title><link>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/</guid><description>&lt;p>Simulated Signal Magnetic Drum&lt;/p>
&lt;ul>
&lt;li>The cylindrical drum itself rotates, with a probe reading the magnetic information on the drum’s surface.&lt;/li>
&lt;li>Capacity is 60KB with read speed of 60KB/s.&lt;/li>
&lt;/ul>
&lt;p>Vinyl Record Player&lt;/p>
&lt;ul>
&lt;li>The record is made of PVC.&lt;/li>
&lt;li>This is an analog signal device. When recording, grooves are etched into concentric circles, and the needle swings left and right, causing the magnet at the other end to also swing. Each swing direction has an inductive coil set up to sense different current in both channels. This sensed current is then amplified and played back.&lt;/li>
&lt;li>The popping sound is caused by the dust on the track disrupting the needle. It can be eliminated with a dust cover or by vacuum processing.&lt;/li>
&lt;li>With analog signals, the amount of information is theoretically infinite.&lt;/li>
&lt;/ul>
&lt;p>Magnetic Tape&lt;/p></description></item><item><title>数据库索引</title><link>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</guid><description>&lt;p>What is an Index: A data structure that stores the index values and the disk addresses or raw data of the index entries.
Common Data Structure: B+ Tree.
Why not other data structures:
Binary Tree: A one-way linked list is formed for incrementing indexes
Binary Balanced Tree (Red-Black Tree): Each node stores the index and address. It balances the height of the left and right branches and was used by early MySQL. It is not fast enough because there are few data entries per level, and the tree is too tall.
B Tree: It is multi-way. Each node stores the index and data. The index values increment from left to right without duplicate indexes.
B+ Tree: Used by MySQL. All data is stored in leaf nodes. Non-leaf nodes only store redundant header indexes (like alphabetical indexes in a dictionary). Leaf nodes are linked by pointers to improve the performance of range searches.
Characteristics:&lt;/p></description></item><item><title>Hello World</title><link>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/hello-world/</link><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/en/posts/hello-world/</guid><description>&lt;p>This is the content of the first article.&lt;/p></description></item></channel></rss>