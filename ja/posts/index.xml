<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on 私のサイト</title><link>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/</link><description>Recent content in Posts on 私のサイト</description><generator>Hugo -- 0.147.8</generator><language>ja</language><lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hash算法</title><link>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</guid><description>&lt;p>原始データはハッシュ関数を通じて一定の長さの数列に計算され、この計算後の値をハッシュ値（ハッシュバリューまたはダイジェスト）と呼びます。ハッシュ値は不可逆で、つまり、ハッシュ値から原始データを逆推理することはできません。また、原始データが微小に変わると、求められたハッシュ値は以前のものと全く異なるため、前の値をもとに強制的に解読するのは困難です。実際の使用では、比較のためによく使用されます。パスワードを入力した後、そのパスワードのハッシュ値が計算され、サーバーデータベースに送信されます。データベースに保存されているパスワードデータは全て元のパスワードのハッシュ値で、ユーザーから送信されたハッシュ値と比較してパスワードが正しいかどうかを検証します。&lt;/p>
&lt;p>データを保存する際には、ハッシュ関数を使ってハッシュテーブルを作成し、データ自体を計算したハッシュ値をテーブルのインデックスとして使用することができます。計算方法は以下の通りです:
データが数字であれば、この数字自体（またはその各桁の数字または一定の長さ、例えば4桁ずつの小節）をmodテーブルの長さにして余数を求め、これがインデックス（つまり、このデータがテーブルのどの位置にあるか）を作成します。データが文字列の場合、ASCII表を使って数字に変換し、その合計を求め、前のアルゴリズムを続行します。&lt;/p>
&lt;p>衝突：
2つのデータが同じハッシュ値を計算した場合、衝突が起こる可能性があります。次に到着するデータの処理方法は次のとおりです :
オープンアドレッシング方式（任意のデータがテーブルの任意の位置を占めることができます）
1.
リニアプロービング方式 最寄りの空きスポットを探す
2.
プラス3リハッシュ方式 3つ先の空きスポットを飛び飛びに探す
3.
その他の方法&lt;/p>
&lt;p>クローズドアドレッシング方式
リンク方式を使用。既に占有しているデータをエントリポイントにして新しいデータをリンクさせる。&lt;/p></description></item><item><title>数据库索引</title><link>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</guid><description>&lt;p>インデックスとは？：インデックス値とインデックスエントリのディスクアドレスまたは元のデータを保存したデータ構造
一般的なデータ構造：B+ツリー
なぜ他のデータ構造を使わないのか:
二分木：逐次的なインデックスで一方向リンクリストが形成されます。
二分探索木（レッドブラックツリー）：各ノードがインデックスとアドレスを保存し、自動的に左右の枝の高さをバランス取りする特性があり、かつてはMySQLが利用していた。しかし、各レベルのデータ量は少なく、ツリーの高さが高すぎるため、探索速度が追いつかない。
Bツリー：多分岐の性質を持ち、各ノードがインデックスとデータを保存、インデックスは左から右へと増加し、重複したインデックスは存在しない。
B+ツリー：MySQLが使用しており、すべてのデータは葉ノードに存在し、非葉ノードは冗長な先頭インデックス（例えば、辞書の頭文字インデックスのような）のみを保存します。葉ノード間はポインタで接続されており、区間探索のパフォーマンスを向上させます。
特性：&lt;/p>
&lt;ul>
&lt;li>二分検索木型の一種&lt;/li>
&lt;li>各ノードには複数のデータが存在し、MySQLでは一つのノードのサイズは16KB&lt;/li>
&lt;li>単一ノード内に多くのデータが存在するため、ツリーの高さは低く、一般的には3層&lt;/li>
&lt;/ul>
&lt;p>ストレージエンジン MyISAM と InnoDB
差分：
MyISAM：各データベースはdataディレクトリ下に保存され、各データベーステーブルファイルでは、MyISAMには.frm（テーブル構造）、.MYD（データ本体）、.MYI（インデックス）の3種類のファイルがあり、これがB+ツリー構造に対応しています。また、MyISAMは非クラスタインデックスを採用し、データとインデックスは分けて保存され、インデックスはアドレスのみを探します。
InnoDB：ライブラリのテーブルファイルには.frm（テーブル構造）と.idb（データとインデックス）の2種類のファイルのみがあり、対応する行データはすべて葉ノード上にぶら下がっており、データアクセスの際のI/O操作を1回省略できるため、クラスタインデックス（Clustered Index）を使用しながら、パフォーマンスが高いです。
接続：
内部ではB+ツリーを利用し、子ノードを取得したあとは、メモリ内で二分探索を行います。&lt;/p>
&lt;p>思考：
なぜInnoDBは主キーインデックスの作成を推奨し、整数型の自増主キーを利用するのか：&lt;/p>
&lt;ul>
&lt;li>主キーを作成する理由：MySqlのクエリロジックでは、まずB+ツリーを作成してデータを整理しなければならないため、インデックスが必須です。非主キーインデックスの場合、葉ノードが保存するデータは対応行の主キー値であり、その後、主キーインデックスの探索が再度行われます。非主キーインデックスが存在しない場合、MySQLは現在の列から一つの重複しないUnique列を選択し、インデックス探索を行います。このような列が存在しない場合、隠し列を作成し、インデックスを構築します。&lt;/li>
&lt;li>整数型を使用する理由：操作が速く、文字列インデックスの場合、エンコーディングテーブル（ASCIIやUTF-8等）を一文字ずつ検索し、その後、前後を比較する必要があります。これは、ランダム文字列のUUIDの使用を推奨しない理由の一つです。&lt;/li>
&lt;li>自増する理由：&lt;/li>
&lt;/ul>
&lt;p>各フィールドのインデックスは設定可能で、デフォルトはB+ツリーで、ハッシュを用いることも可能です。
ハッシュ：&lt;/p>
&lt;ul>
&lt;li>MySQLには独自のハッシュ実装があります&lt;/li>
&lt;li>その本質は配列＋リンクリストであり、ハッシュ値を算出し、その値を配列のキーとし、データを配列のバリューとして保存します。ハッシュ値が重複する場合（ハッシュの衝突）、配列のバリューには次のリンクリストのノードへのポインタが保存され、リンクリストの末端までデータへのポインタが続きます。&lt;/li>
&lt;li>一般的には、探索速度はB+ツリーよりも優れていますが、区間探索ができないため、採用されていませんが、区間探索が不要な場合は、ハッシュインデックスの使用を検討することができます。&lt;/li>
&lt;/ul></description></item><item><title>存储技术</title><link>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/</guid><description>&lt;p>アナログ信号のドラム&lt;/p>
&lt;ul>
&lt;li>円柱本体が回転し、探針がドラム本体上の磁気情報を読み取る&lt;/li>
&lt;li>容量60KB、読み取り速度60KB/秒&lt;/li>
&lt;/ul>
&lt;p>レコードプレーヤー&lt;/p>
&lt;ul>
&lt;li>レコードはPVC製&lt;/li>
&lt;li>アナログ信号機。書き込み時に同心円上に凹みを彫り、カートリッジを左右に振動させ、カートリッジの一端に磁石が装着されていて、磁石は左右に振動し、左右に配置された2つのインダクターコイルを使って、左右のサウンドチャンネルで異なる電流を感知する。感知した電流は増幅後再生される&lt;/li>
&lt;li>ポップノイズ：レコードの表面に降り積もったダストがカートリッジを邪魔し、ダストカバーを装着するか、真空処理することで解消することができます&lt;/li>
&lt;li>アナログ信号、情報量無限大&lt;/li>
&lt;/ul>
&lt;p>カセットテープ&lt;/p>
&lt;ul>
&lt;li>酸化鉄を塗布したプラスチックテープ、磁化可能&lt;/li>
&lt;li>読み書き：コイルを巻いた鉄棒、ギャップがあるリング、このギャップを通してテープを磁化し、ギャップが小さいほど情報量が多い&lt;/li>
&lt;li>雑音：さまざまな粒子が生み出すランダムな電信号&lt;/li>
&lt;li>アナログでもデジタルでも可、シーケンシャルな読み書き、企業の冷却バックアップの最適解、大容量で低コスト、40円/TB&lt;/li>
&lt;/ul>
&lt;p>フロッピーディスク&lt;/p>
&lt;ul>
&lt;li>カセットテープの材料とハードディスクドライブの原理を組み合わせています。マグネティックトラックとセクターがあります。&lt;/li>
&lt;li>壊れやすい：マグネティックトラックが直接大気中に晒されていて、外装と接触し、常に摩擦し合います。&lt;/li>
&lt;li>容量1MB、読書き100KB/秒&lt;/li>
&lt;/ul>
&lt;p>光ディスクCD、DVD、ブルーレイ&lt;/p>
&lt;ul>
&lt;li>書き込み：ピアノの滝のような、ブライユ文字やモールス符号のように、プラスチック素材に様々な長さの凹点や凹槽を刻む&lt;/li>
&lt;li>読み出し：赤外線を照射し、ラインスキャン。凹点がある場所で反射率が異なる。ディスクの鏡面はコントラストを向上させ、識別率を高めるため。&lt;/li>
&lt;li>ブルーレイ：波長の短いブルーレイを使用し、よりダイレクトに点を読み取ることができます。&lt;/li>
&lt;li>単盤容量100G、100MB/秒で読み取り可能&lt;/li>
&lt;/ul>
&lt;p>ハードディスクドライブ（HDD）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ブランド：Western Data、Seagate、Toshiba&lt;/p>
&lt;/li>
&lt;li>
&lt;p>構成：&lt;/p>
&lt;ul>
&lt;li>メタルケース&lt;/li>
&lt;li>通気孔：内部に空気やヘリウムが充填され、熱膨張・収縮に対応するため、ダスト対策が施された通気孔がある&lt;/li>
&lt;li>ヘッドが浮かび上がり、ディスクの回転で生じる空気浮力を利用する&lt;/li>
&lt;li>制御回路ボード：Ramキャッシュ、Romファームウェア、モータードライブ、CPUチップ&lt;/li>
&lt;li>ディスク：アルミ合金/穀物基盤+磁性材料のコーティング+保護コーティング&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>MR：Magnetic Resistance（磁気抵抗）&lt;/p>
&lt;ul>
&lt;li>原理：磁場は一部の素材の電気抵抗を変える&lt;/li>
&lt;li>効用：ヘッドの感度を向上させ、ディスク容量を大幅に増加させる。LMR（メディアの粒子が水平に配置される）からPMR（垂直マグネティックレコーディング）に推進する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>アドレッシング&lt;/p>
&lt;ul>
&lt;li>ディスク&lt;/li>
&lt;li>シリンダ（ヘッドが同期移動するため）&lt;/li>
&lt;li>トラック：外側から内側へ、0からスタート&lt;/li>
&lt;li>セクター（512B）：外層のセクター数が内層よりも多く、読書きがよりスムーズ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>フォーマット：&lt;/p>
&lt;ul>
&lt;li>ファストフォーマット：パーティションテーブルをクリーニング&lt;/li>
&lt;li>ノーマルフォーマット：セクターに0を登録&lt;/li>
&lt;li>ローレベルフォーマット：ディスクをクリーニングし、トラックとセクターを再分配する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>ストレージ最適化&lt;/p>
&lt;ul>
&lt;li>クラスター（win）、ブロック（unix）：隣接するブロックを最小単位として合体させる、win-NTFS=4KB&lt;/li>
&lt;li>ファイルの大きさと利用空間：サイズはファイルの実際のサイズで、使用量はクラスターのサイズで、使用量&amp;gt;=ファイルのサイズ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>速度：ターゲット設定時間+ローテーション遅延+読み書き時間&lt;/p>
&lt;/li>
&lt;li>
&lt;p>キャッシュ：64MBレベルのメモリー、入出力とディスク読取り時間に差異がある、差異を縮小するためにキャッシュを設定。必ずしも大きいほど良いわけではない（利用しきれない、高価、リスク大）。&lt;/p>
&lt;ul>
&lt;li>書き込み時に一旦キャッシュに書き込み、次にヘッドがゆっくりとセクタに書き込む（フラッシュドライブやハードディスクなどを安全に取り外すためには、事前にデバイスをアンマウントする必要があります。そうしなければ、データはキャッシュ内に存在し、電源が遮断されるとデータは消滅します。）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>テスト&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ソフトウェア：CrystalDiskMark 或者 AS SSD Benchmark&lt;/p>
&lt;/li>
&lt;li>
&lt;p>パラメータ：&lt;/p>
&lt;ul>
&lt;li>seq：シーケンシャル読み書き&lt;/li>
&lt;li>RND/4k：ランダム読み書き&lt;/li>
&lt;li>Acc.Time：平均アクセス時間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>容量が少なくなったときにスピードが低下：&lt;/p>
&lt;ul>
&lt;li>ディスクの外側から内側へ書き込み、通過するセクターの数が減る（一部）&lt;/li>
&lt;li>フラグメントが多すぎると、連続して読み書きできる領域が少なくなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ソリッドステートドライブ&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ROM: リードオンリーメモリ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EPROM：Erasable Programable ROM, 紫外線を使って電子を含む情報を消し、再プログラミングが可能&lt;/p></description></item><item><title>Hello World</title><link>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/hello-world/</link><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/ja/posts/hello-world/</guid><description>&lt;p>これは最初の記事の内容です。&lt;/p></description></item></channel></rss>