<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Qingtai Site</title><link>https://oxcarbazerpine.github.io/qingtaihugo/posts/</link><description>Recent content in Posts on Qingtai Site</description><generator>Hugo -- 0.147.8</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oxcarbazerpine.github.io/qingtaihugo/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hash算法</title><link>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</guid><description>&lt;p>通过哈希方程将原始数据计算为一串定长的数字，（SHA-256算法就是256bits)，计算后的值称为哈希值（hash value or digest) ，哈希值不可逆，即无法通过哈希值反推出原始数据，并且就算原始数据只有微小的变化，算出的哈希值也与之前的完全不同，所以不易根据之前的值暴力破解。在实际运用中常用于比较，在我们输入密码后，密码先被算出它的哈希值，然后传输到服务器数据库，数据库里存的密码数据都是原始密码的哈希值，通过与用户传过来的哈希值比较来验证密码是否正确。&lt;/p>
&lt;p>在存储数据时，可以根据哈希方程创建一个哈希表用数据本身计算哈希值来作为表格的索引，计算方式如下：
如果数据是数字，可以用这个数字本身（或各位数字或每隔一定长度比如四位作为一小段，相加得到每一个部分相加的和），来mod表格长度取余数，得到索引，也就是这个数据在表格的坐标；如果数据是字符串，可以根据ASCii表转换成数字然后求和，继续刚才的算法。
冲突：
若两个数据计算出来的哈希值相同，就会发生冲突，这时后来的数据有几种处理方法：
open addressing(任何一个数据可以视情况占据表格的任何位置）
1.
Linear probing 依次向后查找空位
2.
Plus 3 rehash 隔三个空向后跳跃查找空位
3.
其余方法&lt;/p>
&lt;p>closed addressing
采用链式连接方式，通过已经占位的数据链接到新数据的位置。&lt;/p></description></item><item><title>存储技术</title><link>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/</guid><description>&lt;p>模拟信号磁鼓&lt;/p>
&lt;ul>
&lt;li>圆柱体本身旋转，探针读取鼓身上的磁性信息&lt;/li>
&lt;li>容量60KB，读速度60KB/s&lt;/li>
&lt;/ul>
&lt;p>黑胶唱片Record Player&lt;/p>
&lt;ul>
&lt;li>唱片是PVC&lt;/li>
&lt;li>模拟信号机。写时在同心圆圈上刻凹痕，唱头左右随摆动，唱头另一端的磁铁随之左右摆动，磁铁左右各设置一个电感线圈，用来感应出左右声道不同的电流。感应电流经过amplify后播放&lt;/li>
&lt;li>爆豆声：道上的灰尘阻碍了唱头，可通过加防尘罩或真空处理消除&lt;/li>
&lt;li>模拟信号，信息量无限大&lt;/li>
&lt;/ul>
&lt;p>磁带&lt;/p>
&lt;ul>
&lt;li>涂氧化铁的塑料带，可被磁化&lt;/li>
&lt;li>读写：绕线圈的铁棒，是一个有缺口gap的环，通过这个gap来磁化磁带，gap越窄，信息量越大&lt;/li>
&lt;li>沙沙声：各种粒子产生的随机电信号&lt;/li>
&lt;li>可模拟可数字，顺序读写，企业冷备份首选，大容量低成本，40元/TB&lt;/li>
&lt;/ul>
&lt;p>软盘&lt;/p>
&lt;ul>
&lt;li>磁带的材料加上机械硬盘的原理，有磁道和扇区&lt;/li>
&lt;li>容易坏：磁道直接暴露在空气中，和外壳接触，经常摩擦&lt;/li>
&lt;li>容量1MB，读写100KB/s&lt;/li>
&lt;/ul>
&lt;p>光盘CD，DVD，蓝光Blue-Ray&lt;/p>
&lt;ul>
&lt;li>写入：像钢琴瀑布流，盲文，摩斯码一样，在塑料材料上烧出一个个长度不是的凹点或者凹条&lt;/li>
&lt;li>读出：红外线照射，线性扫描，有凹点的地方反射率不同。光碟镜面为了提高对比度，提高识别率&lt;/li>
&lt;li>蓝光：用波长更短的蓝光读取，点可以烧的更密集&lt;/li>
&lt;li>单盘容量100G，100MB/s读取&lt;/li>
&lt;/ul>
&lt;p>机械硬盘HDD Hard Disk Drive&lt;/p>
&lt;ul>
&lt;li>
&lt;p>品牌：西部数据Western Data, 希捷Seagate, 东芝Toshiba&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构成：&lt;/p>
&lt;ul>
&lt;li>金属外壳&lt;/li>
&lt;li>通气孔：内部填充空气或氦气，对应热胀冷缩，留一个有防尘措施的气孔&lt;/li>
&lt;li>磁头悬浮，利用磁盘旋转产生的空气浮力&lt;/li>
&lt;li>控制电路板：缓存Ram，固件Rom，电机驱动，主控芯片&lt;/li>
&lt;li>盘片：铝合金/波粒基底+磁性材料涂层+保护涂层&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>MR：Magnetic Resistance磁阻&lt;/p>
&lt;ul>
&lt;li>原理：磁场会改变一些材料的电阻&lt;/li>
&lt;li>作用：提升了磁头灵敏度，大幅提高了磁盘容量，水平磁记录LMR（磁颗粒横向在盘片上）-&amp;gt;垂直磁记录PMR（Perpendicular ）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>寻址&lt;/p>
&lt;ul>
&lt;li>盘面&lt;/li>
&lt;li>柱面（因磁头同步移动）&lt;/li>
&lt;li>磁道：从外向内，从0开始&lt;/li>
&lt;li>扇区（512B）：外层的扇区数量比内层多，读写速度更快&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>格式化：&lt;/p>
&lt;ul>
&lt;li>快速格式化：清理分区表&lt;/li>
&lt;li>普通格式化：扇区填0&lt;/li>
&lt;li>低级格式化：清理盘面，重新划分磁道和扇区&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>存储优化&lt;/p>
&lt;ul>
&lt;li>簇（win），块unix:合并相邻的块作为最小单元，win-NTFS=4KB&lt;/li>
&lt;li>文件大小与占用空间：大小是文件实际大小，占用是簇的大小，所以占用空间&amp;gt;=文件大小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>速度：寻道时间+旋转延迟+读写时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓存：64MB级别的内存条，IO与磁盘读取时间存在差异，为了减小差异，设置缓存。不是越大越好（用不上，贵，风险大）&lt;/p>
&lt;ul>
&lt;li>写入时可先写入缓存，磁头再慢慢写入扇区（把U盘硬盘之前先卸载设备的原因，否则数据只存在缓存中，断电消失）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>测试&lt;/p>
&lt;ul>
&lt;li>
&lt;p>软件：CrystalDiskMark 或者 AS SSD Benchmark&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参数：&lt;/p>
&lt;ul>
&lt;li>seq:顺序读写&lt;/li>
&lt;li>RND/4k:随机读写&lt;/li>
&lt;li>Acc.Time:平均访问时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>容量变少时降速：&lt;/p>
&lt;ul>
&lt;li>盘片外侧写到内侧，划过扇区数目减小（次要）&lt;/li>
&lt;li>碎片太多，可连续读写区域变少&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>固态硬盘&lt;/p></description></item><item><title>数据库索引</title><link>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</guid><description>&lt;p>索引是什么：一种存储了索引值和索引条目的磁盘地址或原始数据的数据结构
常用数据结构：B+树
为什么不用其他数据结构:
二叉树：对递增索引会形成一个单向链表
二叉平衡树（红黑树）：每个节点存储索引和地址，自动平衡左右分支高度，早期MySQL曾使用。每层数据量少，树高太高，查找起来还是不够快。
B树：多叉，每个节点存储索引和Data，索引从左向右递增，没有重复索引
B+树：MySQL使用，所有数据存在叶子节点，非叶子节点只存储冗余的头部索引（像单词表中的首字母索引），叶子节点之间用指针连接，以提高区间查找的性能。
特征：&lt;/p>
&lt;ul>
&lt;li>一种二叉树&lt;/li>
&lt;li>每个节点有多个数据，MySQL一个节点有16KB大小&lt;/li>
&lt;li>因为单个节点数据多，树的高度很低，一般3层&lt;/li>
&lt;/ul>
&lt;p>存储引擎 MyISAM 和 InnoDB
区别
MyISAM：每个数据库存储在data目录下，每个数据库表文件中，MyISAM有3种文件，.frm 文件存储表结构，.MYD （D for data）存储原始数据， .MYI （I for index）存储表的索引，也就是B+树结构。为非聚集索引：数据和索引不聚集在一起存放，分成两个文件，索引只找出地址
InnoDB：库表文件中只有两种类型，.frm 存储表结构，.idb 存储数据和索引，对应行数据全部挂在叶子节点上，节省了按地址查找数据的一次I/O操作，为聚集索引（Clustered Index），性能更好。
联系:
内部使用B+树，取到子节点后加载到内存进行内部的二分查找&lt;/p>
&lt;p>思考：
为什么InnoDB建议建立主键索引，并且使用整型自增主键：&lt;/p>
&lt;ul>
&lt;li>为什么建立主键：因为MySql的查询逻辑是，首先必须建立B+树来组织数据，所以必须要有索引， 如果是非主键索引，叶子节点存储的Data是对应行的主键的值，然后再进行一次主键索引查找。如果连非主键索引都没有，MySQL会在现有列中选择一列符合无重复的Unique的列来建立索引查找，如果没有这样的列，就建立一列隐藏列，用来建立索引。&lt;/li>
&lt;li>为什么要用整数：比对操作快，如果是字符串索引，需要逐位查找编码表（ASCII或者utf8等）表然后比较先后，这也是为什么不推荐使用是随机字符串的UUID&lt;/li>
&lt;li>为什么需要自增：&lt;/li>
&lt;/ul>
&lt;p>每个字段的索引可以设置，默认为B+ Tree，可以选择用Hash
Hash:&lt;/p>
&lt;ul>
&lt;li>MySQL有自己的hash实现&lt;/li>
&lt;li>本质是数组+链表，hash计算查找值算出hash值，作为数组的key，数据作为数组的value；如果计算出的hash值重复了，即发生了hash碰撞，则数组value存储指向下一个链表节点的指针，直到链表末尾指向数据。&lt;/li>
&lt;li>一般情况下查找速度甚至好于B+树，但是由于不能进行范围查找，没有被采用，因此如果不进行区间查找的场景可以考虑使用hash索引&lt;/li>
&lt;/ul></description></item><item><title>计算机网络</title><link>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>&lt;p>-王道考研
第一章 计算机网络体系结构
可以互相通信，但没有互相控制
组成部分：硬件，软件，协议
工作方式：边缘部分：用户直接使用
核心部分：为边缘提供支持
功能：数据通信，资源共享&lt;/p>
&lt;p>分类
分布范围：广域网WAN，城域网MAN，局域网LAN，个人区域网PAN
使用者：公用网，专用网
交换技术：电路交换，报文交换，分组交换
传输技术：广播式，点对点式&lt;/p>
&lt;p>-思科Cisco Packet Tracer仿真实验
TCP/IP 四层协议体系
数据链路层：数据的物理传输以及网卡驱动读取数据
网络层：控制数据包的路由和转发
传输层：控制计算机之间端到端的通信
应用层：各种应用程序的逻辑&lt;/p>
&lt;p>集线器:一种总线网络，无差别广播以及发生碰撞
概念：IP地址， MAC地址
ARP协议：Address Resolution Protocol
属于网络层。维护一个ARP表，记录ip地址，MAC号，网络接口。其它协议不知道发送目的的MAC号时，首先发送ARP包广播询问MAC号，并更新表项，再次尝试发送原包。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>自顶而下&lt;/strong>&lt;/p>
&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>宽带接入：&lt;/p>
&lt;ul>
&lt;li>复用电话线路：数字用户线DSL(Digital Subscriber Line)&lt;/li>
&lt;li>复用有线电视线路：光纤+同轴电缆&lt;/li>
&lt;li>FTTH光纤入户：将光纤线拉到家里&lt;/li>
&lt;li>卫星链路接入&lt;/li>
&lt;li>WiFi:无线LAN接入-调制解调器-ISP&lt;/li>
&lt;li>广域无线接入：3G&lt;/li>
&lt;/ul>
&lt;p>物理媒介&lt;/p>
&lt;ul>
&lt;li>双绞铜线：两根绞合的铜线，电话线，10M~10G，高速LAN网&lt;/li>
&lt;li>同轴电缆：两个同心铜导体，数十MB&lt;/li>
&lt;li>光纤：数百GB，不受电磁干扰，长途不衰减。成本高&lt;/li>
&lt;li>无线电信道&lt;/li>
&lt;li>卫星无线电：280ms时延，数百M&lt;/li>
&lt;/ul>
&lt;p>分组交换
路由器的存储转发：&lt;/p>
&lt;ul>
&lt;li>缓存完整分组后转发，延迟为2L/R&lt;/li>
&lt;li>排队时延queue delay：路由器的缓存有限，造成丢包packet lost&lt;/li>
&lt;li>转发表forwarding table：端口ip与物理编号&lt;/li>
&lt;/ul>
&lt;p>电路交换：预定资源，电路交换机构成
收发方先建立一条能直接联通的电路circuit，确保能以恒定速率传输数据。
每个电路交换机预留恒定带宽维持通信&lt;/p>
&lt;ul>
&lt;li>频分复用FDM|Frequency-Division Multiplexing:分配固定的频段，收音机FM也是&lt;/li>
&lt;li>时分复用TDM：在循环的TDM帧重每条电路被分配专用时隙&lt;/li>
&lt;/ul>
&lt;p>互联网：网络的网络，&lt;/p>
&lt;ol>
&lt;li>第一层ISP-十数个&lt;/li>
&lt;li>区域ISP-数十万个&lt;/li>
&lt;li>接入ISP&lt;/li>
&lt;/ol>
&lt;p>延迟：1. 处理时延 2. 排队时延 3. 传输时延（推到线路上所用时间） 4. 传播时延
流量强度/传输速率，接近1时，排队时延无限长
丢包：超出缓冲区，被路由器丢弃
吞吐量：单位时间传送的比特量，由链路的瓶颈决定&lt;/p></description></item><item><title>Hello World</title><link>https://oxcarbazerpine.github.io/qingtaihugo/posts/hello-world/</link><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><guid>https://oxcarbazerpine.github.io/qingtaihugo/posts/hello-world/</guid><description>&lt;p>这是第一篇文章内容。&lt;/p></description></item></channel></rss>